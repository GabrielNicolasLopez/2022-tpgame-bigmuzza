import wollok.game.*
import juego.*
import bomber.*
import direcciones.*
import soundProducer.*
import soundManager.*
	
	
describe "tests del juego"{
	//Bomber
	const bomberTest = new Bomber(position = game.center().left(1), nroBomber = "1", posScore = 1)
	const posicionInicial = bomberTest.position()

	//Bomba
	const bombaTest = new Bomba(position = game.center(), poder = 1)
	
	//Pared
	const paredRompible   = new Pared(position = game.center().up(1), destruible = true)
	const paredIrrompible = new Pared(position = game.center().down(1), destruible = false)
	
	//Power Ups
	const escudo = new Escudo(position = game.origin())
	const masBomba = new MasBomba(position = game.origin())
	const masPoderBomba = new MasPoderBomba(position = game.origin())
	
	test "bomber coloca una bomba" {
		bomberTest.ponerBomba()
		const objetos = game.getObjectsIn(posicionInicial)
		assert.that(objetos.any({objeto => objeto.image() == "Bomb1.png"}))
	}
	
	test "powerup masBombas aumenta la cantidad de bombas" {
		game.addVisual(masBomba)
		const estadoInicial = bomberTest.cantidadBombas()
		bomberTest.obtener(masBomba)
		assert.that(bomberTest.cantidadBombas() == estadoInicial+1)
	}
	
	test "powerup masPoderBomba aumenta la potencia de la bomba" {
		game.addVisual(masPoderBomba)
		const estadoInicial = bomberTest.poderBomba()
		bomberTest.obtener(masPoderBomba)
		assert.that(bomberTest.poderBomba() == estadoInicial+1)
	}
	
	test "powerup escudo funciona" {
		game.addVisual(escudo)
		bomberTest.obtener(escudo)
		assert.that(bomberTest.tieneEscudo())
	}
	
	// test de sacarle el escudo
	test "bomber con escudo lo pierde si la explosion lo daÃ±a" {
		game.addVisual(escudo)
		game.addVisual(bomberTest)
		bomberTest.obtener(escudo)
		bombaTest.explotar(bombaTest)
		assert.that(!bomberTest.tieneEscudo())
	}
	
	test "bomber con 0 vidas pierde" {
		bomberTest.cantidadVidas(0)
		assert.notThat(juego.hayGanador())
	}
	
	test "destruccion de paredes irrompibles" {
		game.addVisual(paredIrrompible)
		bombaTest.explotar(bombaTest)
		assert.that(game.hasVisual(paredIrrompible))
	}
	
	test "destruccion de paredes rompibles" {
		game.addVisual(paredRompible)
		bombaTest.explotar(bombaTest)
		assert.that(not game.hasVisual(paredRompible))
	}
	
	test "si alcance el limite de bombas no puedo poner mas" {
		bomberTest.ponerBomba()
		bomberTest.moverA(arriba)
		bomberTest.ponerBomba()
		const objetos = game.getObjectsIn(bomberTest.position())
		assert.notThat(objetos.any({objeto => objeto.image() == "Bomb1.png"}))
	}
	
	//test el bomber choca contra paredes
}

describe "tests de powerUps"{
	//Power Ups
	const escudo = new Escudo(position = game.origin())
	const masBomba = new MasBomba(position = game.origin())
	const masPoderBomba = new MasPoderBomba(position = game.origin())

	test "powerup masBombas aumenta la cantidad de bombas" {
		game.addVisual(masBomba)
		const estadoInicial = bomberTest.cantidadBombas()
		bomberTest.obtener(masBomba)
		assert.that(bomberTest.cantidadBombas() == estadoInicial+1)
	}
	
	test "powerup masPoderBomba aumenta la potencia de la bomba" {
		game.addVisual(masPoderBomba)
		const estadoInicial = bomberTest.poderBomba()
		bomberTest.obtener(masPoderBomba)
		assert.that(bomberTest.poderBomba() == estadoInicial+1)
	}
	
	test "powerup escudo funciona" {
		game.addVisual(escudo)
		bomberTest.obtener(escudo)
		assert.that(bomberTest.tieneEscudo())
	}
}
